// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// QRADMMCPP
arma::vec QRADMMCPP(arma::mat xr, arma:: vec yr, arma::vec betar, double to, int mr, double ta, double rhor);
RcppExport SEXP cqrReg_QRADMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP toSEXP, SEXP mrSEXP, SEXP taSEXP, SEXP rhorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP );
        Rcpp::traits::input_parameter< arma:: vec >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP );
        Rcpp::traits::input_parameter< double >::type to(toSEXP );
        Rcpp::traits::input_parameter< int >::type mr(mrSEXP );
        Rcpp::traits::input_parameter< double >::type ta(taSEXP );
        Rcpp::traits::input_parameter< double >::type rhor(rhorSEXP );
        arma::vec __result = QRADMMCPP(xr, yr, betar, to, mr, ta, rhor);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CQRADMMCPP
arma::vec CQRADMMCPP(arma::mat xr, arma::vec yr, arma::vec betar, double to, int mr, arma::vec ta, double rhor, double pr);
RcppExport SEXP cqrReg_CQRADMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP toSEXP, SEXP mrSEXP, SEXP taSEXP, SEXP rhorSEXP, SEXP prSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP );
        Rcpp::traits::input_parameter< double >::type to(toSEXP );
        Rcpp::traits::input_parameter< int >::type mr(mrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type ta(taSEXP );
        Rcpp::traits::input_parameter< double >::type rhor(rhorSEXP );
        Rcpp::traits::input_parameter< double >::type pr(prSEXP );
        arma::vec __result = CQRADMMCPP(xr, yr, betar, to, mr, ta, rhor, pr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QRPADMMCPP
arma::vec QRPADMMCPP(arma::mat xr, arma::vec yr, arma::vec betar, int m, double ta, double rhor, double lambdar);
RcppExport SEXP cqrReg_QRPADMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP mSEXP, SEXP taSEXP, SEXP rhorSEXP, SEXP lambdarSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP );
        Rcpp::traits::input_parameter< int >::type m(mSEXP );
        Rcpp::traits::input_parameter< double >::type ta(taSEXP );
        Rcpp::traits::input_parameter< double >::type rhor(rhorSEXP );
        Rcpp::traits::input_parameter< double >::type lambdar(lambdarSEXP );
        arma::vec __result = QRPADMMCPP(xr, yr, betar, m, ta, rhor, lambdar);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CQRPADMMCPP
arma::vec CQRPADMMCPP(arma::mat xr, arma::vec yr, arma::vec betar, int mr, arma::vec ta, double rhor, double lambdar, int pr, int kr);
RcppExport SEXP cqrReg_CQRPADMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP mrSEXP, SEXP taSEXP, SEXP rhorSEXP, SEXP lambdarSEXP, SEXP prSEXP, SEXP krSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP );
        Rcpp::traits::input_parameter< int >::type mr(mrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type ta(taSEXP );
        Rcpp::traits::input_parameter< double >::type rhor(rhorSEXP );
        Rcpp::traits::input_parameter< double >::type lambdar(lambdarSEXP );
        Rcpp::traits::input_parameter< int >::type pr(prSEXP );
        Rcpp::traits::input_parameter< int >::type kr(krSEXP );
        arma::vec __result = CQRPADMMCPP(xr, yr, betar, mr, ta, rhor, lambdar, pr, kr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CQRCDCPP
arma::vec CQRCDCPP(arma::mat xr, arma:: vec yr, arma::vec betar, double to, int m, arma::vec ta);
RcppExport SEXP cqrReg_CQRCDCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP );
        Rcpp::traits::input_parameter< arma:: vec >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP );
        Rcpp::traits::input_parameter< double >::type to(toSEXP );
        Rcpp::traits::input_parameter< int >::type m(mSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type ta(taSEXP );
        arma::vec __result = CQRCDCPP(xr, yr, betar, to, m, ta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CQRMMCPP
arma::vec CQRMMCPP(arma::mat xr, arma:: vec yr, arma::vec betar, double to, int m, arma::vec ta);
RcppExport SEXP cqrReg_CQRMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP );
        Rcpp::traits::input_parameter< arma:: vec >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP );
        Rcpp::traits::input_parameter< double >::type to(toSEXP );
        Rcpp::traits::input_parameter< int >::type m(mSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type ta(taSEXP );
        arma::vec __result = CQRMMCPP(xr, yr, betar, to, m, ta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CQRPCDCPP
arma::vec CQRPCDCPP(arma::mat xr, arma:: vec yr, arma::vec betar, arma::vec betaoldr, double to, int m, arma::vec ta, double l);
RcppExport SEXP cqrReg_CQRPCDCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP betaoldrSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP, SEXP lSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP );
        Rcpp::traits::input_parameter< arma:: vec >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betaoldr(betaoldrSEXP );
        Rcpp::traits::input_parameter< double >::type to(toSEXP );
        Rcpp::traits::input_parameter< int >::type m(mSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type ta(taSEXP );
        Rcpp::traits::input_parameter< double >::type l(lSEXP );
        arma::vec __result = CQRPCDCPP(xr, yr, betar, betaoldr, to, m, ta, l);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CQRPMMCPP
arma::vec CQRPMMCPP(arma::mat xr, arma::vec yr, arma::vec betar, arma::vec betaoldr, double to, int m, arma::vec ta, double lamdar);
RcppExport SEXP cqrReg_CQRPMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP betaoldrSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP, SEXP lamdarSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betaoldr(betaoldrSEXP );
        Rcpp::traits::input_parameter< double >::type to(toSEXP );
        Rcpp::traits::input_parameter< int >::type m(mSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type ta(taSEXP );
        Rcpp::traits::input_parameter< double >::type lamdar(lamdarSEXP );
        arma::vec __result = CQRPMMCPP(xr, yr, betar, betaoldr, to, m, ta, lamdar);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QRCDCPP
arma::vec QRCDCPP(arma::mat xr, arma:: vec yr, arma::vec betar, double to, int m, double ta);
RcppExport SEXP cqrReg_QRCDCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP );
        Rcpp::traits::input_parameter< arma:: vec >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP );
        Rcpp::traits::input_parameter< double >::type to(toSEXP );
        Rcpp::traits::input_parameter< int >::type m(mSEXP );
        Rcpp::traits::input_parameter< double >::type ta(taSEXP );
        arma::vec __result = QRCDCPP(xr, yr, betar, to, m, ta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QRMMCPP
arma::vec QRMMCPP(arma::mat xr, arma:: vec yr, arma::vec betar, double to, int m, double ta);
RcppExport SEXP cqrReg_QRMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP );
        Rcpp::traits::input_parameter< arma:: vec >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP );
        Rcpp::traits::input_parameter< double >::type to(toSEXP );
        Rcpp::traits::input_parameter< int >::type m(mSEXP );
        Rcpp::traits::input_parameter< double >::type ta(taSEXP );
        arma::vec __result = QRMMCPP(xr, yr, betar, to, m, ta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QRPCDCPP
arma::vec QRPCDCPP(arma::mat xr, arma::vec yr, arma::vec betar, arma::vec betaoldr, double to, int m, double ta, double lamdar);
RcppExport SEXP cqrReg_QRPCDCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP betaoldrSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP, SEXP lamdarSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betaoldr(betaoldrSEXP );
        Rcpp::traits::input_parameter< double >::type to(toSEXP );
        Rcpp::traits::input_parameter< int >::type m(mSEXP );
        Rcpp::traits::input_parameter< double >::type ta(taSEXP );
        Rcpp::traits::input_parameter< double >::type lamdar(lamdarSEXP );
        arma::vec __result = QRPCDCPP(xr, yr, betar, betaoldr, to, m, ta, lamdar);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// QRPMMCPP
arma::vec QRPMMCPP(arma::mat xr, arma::vec yr, arma::vec betar, arma::vec betaoldr, double to, int m, double ta, double lamdar);
RcppExport SEXP cqrReg_QRPMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP betaoldrSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP, SEXP lamdarSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP );
        Rcpp::traits::input_parameter< arma::vec >::type betaoldr(betaoldrSEXP );
        Rcpp::traits::input_parameter< double >::type to(toSEXP );
        Rcpp::traits::input_parameter< int >::type m(mSEXP );
        Rcpp::traits::input_parameter< double >::type ta(taSEXP );
        Rcpp::traits::input_parameter< double >::type lamdar(lamdarSEXP );
        arma::vec __result = QRPMMCPP(xr, yr, betar, betaoldr, to, m, ta, lamdar);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
